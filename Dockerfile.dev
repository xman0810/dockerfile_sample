ARG base_image=ubuntu18.04
FROM ${base_image}
LABEL maintainer xmantou0810@163.com

# ================== package ==================
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential=12.4ubuntu1 \
    cmake=3.10.2-1ubuntu2.18.04.1 \
    git \
    wget \
    vim \
    g++=4:7.4.0-1ubuntu2.3 \
    unzip \
    ssh-client \
    ninja-build

RUN apt-get install -y --no-install-recommends \
    libomp-dev=5.0.1-1 \
    libatlas-base-dev=3.10.3-5 \
    libboost-all-dev=1.65.1.0ubuntu1 \
    python-dev=2.7.15~rc1-1 \
    python-numpy=1:1.13.3-2ubuntu1 \
    python-scipy=0.19.1-2ubuntu1 \
    libavcodec-dev=7:3.4.6-0ubuntu0.18.04.1 \
    libavformat-dev=7:3.4.6-0ubuntu0.18.04.1 \
    libswscale-dev=7:3.4.6-0ubuntu0.18.04.1 \
    clang-format-5.0 \
    octave=4.2.2-1ubuntu1 \
    libgtk2.0-dev \
    libcanberra-gtk-module \
    libgflags-dev \
    libgoogle-glog-dev \
    libhdf5-serial-dev \
    libleveldb-dev \
    liblmdb-dev \
    libprotobuf-dev \
    libsnappy-dev \
    protobuf-compiler \
    python-pip \
    python-setuptools \
    python-tk


RUN pip install --upgrade pip
RUN pip install -i https://pypi.mirrors.ustc.edu.cn/simple/ \
    Cython==0.29.7 \
    numpy==1.16.3 \
    scipy==0.17.0 \
    scikit-image==0.14.2 \
    matplotlib==2.2.4 \
    ipython==5.8.0 \
    h5py==2.9.0 \
    leveldb==0.194 \
    decorator==4.3.0 \
    networkx==2.2 \
    nose==1.3.7 \
    python-dateutil==2.5.0 \
    pandas==0.24.0 \
    protobuf==3.7.1 \
    python-gflags==3.1.2 \
    pyyaml==5.1 \
    Pillow==6.0.0 \
    six==1.12.0 \
    lmdb==0.94 \
    future==0.18.2 \
    pathlib==1.0.1 \
    tqdm==4.42.1 \
    torchvision

# ============= OpenCV =============
# OpenCV
# [Warning] - opencv-python does not include Video I/O (Can not open Webcam)
# Build opencv from source

ARG opencv_version=3.4.1
ENV OPENCV_DIR /opt/opencv
RUN mkdir -p $OPENCV_DIR
WORKDIR $OPENCV_DIR
#RUN wget https://github.com/Itseez/opencv/archive/${opencv_version}.zip -O opencv-${opencv_version}.zip
COPY ./extras/opencv-${opencv_version}.zip .
RUN unzip opencv-${opencv_version}.zip && \
    cd opencv-${opencv_version} &&\
    mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=$(python -c "import sys; print(sys.prefix)") \
    -D WITH_TBB=ON \
    -D WITH_V4L=ON \
    -D WITH_CUDA=OFF \
    -D WITH_EIGEN=OFF \
    -D WITH_OPENCL=OFF \
    -D BUILD_opencv_python3=YES \
  ..

RUN cd opencv-${opencv_version}/build && \
    make -j"$(nproc)" && \
    make install && \
    rm $OPENCV_DIR/opencv-${opencv_version}.zip

# ================= env setup ================
ENV ROOT_PATH /workspace
ENV INSTALL_PATH /workspace/install
ENV DATA_PATH=/workspace/data
ENV MODEL_PATH=/workspace/data/models
ENV DATASET_PATH=/workspace/data/dataset_zoo
ENV REGRESSION_PATH=/workspace/regression
ENV TPU_PYTHON_PATH=$INSTALL_PATH/python/

ENV CAFFE_PATH=$INSTALL_PATH/caffe
ENV MKLDNN_PATH=$INSTALL_PATH/mkldnn
ENV FLATBUFFERS_PATH=$INSTALL_PATH/flatbuffers

ENV PYTHON_CAFFE=$INSTALL_PATH/caffe/python
ENV MODEL_PYTHON_PATH=$INSTALL_PATH/python/model/retinaface/
ENV PYTHONPATH $PYTHON_CAFFE:$MODEL_PYTHON_PATH:$PYTHONPATH
ENV PYTHONPATH $TPU_PYTHON_PATH:$PYTHONPATH

ENV LD_LIBRARY_PATH=$INSTALL_PATH/lib:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$CAFFE_PATH/lib:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$MKLDNN_PATH/lib:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$FLATBUFFERS_PATH/lib:$LD_LIBRARY_PATH

ENV PATH $INSTALL_PATH/bin:$PATH
ENV PATH $MODEL_PYTHON_PATH:$PATH
ENV PATH $TPU_PYTHON_PATH:$PATH
ENV PATH $CAFFE_PATH:$PATH
ENV PATH $MKLDNN_PATH:$PATH
ENV PATH $FLATBUFFERS_PATH/bin:$PATH


# ================= copy data ===============
COPY ./install $INSTALL_PATH
COPY ./regression $REGRESSION_PATH
COPY ./regression/envsetup.sh $ROOT_PATH


RUN cd $MODEL_PYTHON_PATH && \
    make 
